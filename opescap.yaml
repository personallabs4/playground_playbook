---
- name: OpenSCAP Security Compliance Scan (Simplified)
  hosts: all
  become: yes
  vars:
    scap_reports_dir: "/opt/reports"
    scap_profiles_dir: "/opt/scap_profiles"
    scap_guide_version: "0.1.76"
    timezone_offset: "+07:00"
    report_server: "http://10.20.11.117:2112"

  tasks:
    # Task 1: Update package cache and install basic tools
    - name: Update package cache
      ansible.builtin.package:
        update_cache: yes
      ignore_errors: yes
      tags: setup

    - name: Install basic tools
      ansible.builtin.package:
        name:
          - curl
          - wget
          - unzip
        state: present
      ignore_errors: yes
      tags: setup

    # Task 2: Install OpenSCAP packages based on OS and version
    - name: Install OpenSCAP packages for Ubuntu < 24.04
      ansible.builtin.package:
        name:
          - openscap-utils
          - libopenscap8
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower == "ubuntu"
        - ansible_distribution_major_version | int < 24
      register: ubuntu_old_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for Ubuntu >= 24.04
      ansible.builtin.package:
        name:
          - openscap-scanner
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower == "ubuntu"
        - ansible_distribution_major_version | int >= 24
      register: ubuntu_new_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for Debian (non-Ubuntu)
      ansible.builtin.package:
        name:
          - openscap-utils
          - libopenscap8
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower != "ubuntu"
      register: debian_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for AlmaLinux
      ansible.builtin.package:
        name:
          - openscap-scanner
          - scap-security-guide
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution | lower in ['almalinux', 'alma']
      register: alma_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for other RHEL-based systems
      ansible.builtin.package:
        name:
          - openscap-scanner
          - scap-security-guide
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution | lower not in ['almalinux', 'alma']
      register: rhel_install
      ignore_errors: yes
      tags: setup

    - name: Display OpenSCAP installation results
      ansible.builtin.debug:
        msg: |
          OpenSCAP Installation Results:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - OS Family: {{ ansible_os_family }}
          - Package Installation Status:
            {% if ansible_os_family == "Debian" and ansible_distribution | lower == "ubuntu" %}
              {% if ansible_distribution_major_version | int < 24 %}
                Ubuntu < 24.04: {{ 'Success' if (ubuntu_old_install is defined and ubuntu_old_install is succeeded) else 'Failed' }}
                Packages: openscap-utils, libopenscap8
              {% else %}
                Ubuntu >= 24.04: {{ 'Success' if (ubuntu_new_install is defined and ubuntu_new_install is succeeded) else 'Failed' }}
                Packages: openscap-scanner, openscap-utils
              {% endif %}
            {% elif ansible_os_family == "Debian" %}
              Debian: {{ 'Success' if (debian_install is defined and debian_install is succeeded) else 'Failed' }}
              Packages: openscap-utils, libopenscap8
            {% elif ansible_distribution | lower in ['almalinux', 'alma'] %}
              AlmaLinux: {{ 'Success' if (alma_install is defined and alma_install is succeeded) else 'Failed' }}
              Packages: openscap-scanner, scap-security-guide, openscap-utils
            {% elif ansible_os_family == "RedHat" %}
              RHEL-based: {{ 'Success' if (rhel_install is defined and rhel_install is succeeded) else 'Failed' }}
              Packages: openscap-scanner, scap-security-guide, openscap-utils
            {% endif %}
      tags: setup

    # Task 3: Gather OS information
    - name: Gather OS facts
      ansible.builtin.setup:
        gather_subset:
          - distribution
      tags: always

    # Task 4: Create required directories
    - name: Create directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ scap_reports_dir }}"
        - "{{ scap_profiles_dir }}"
      tags: setup

    # Task 5: Download SCAP Security Guide (universal fallback)
    - name: Download SCAP Security Guide
      ansible.builtin.get_url:
        url: "https://github.com/ComplianceAsCode/content/releases/download/v{{ scap_guide_version }}/scap-security-guide-{{ scap_guide_version }}.zip"
        dest: "/tmp/scap-security-guide.zip"
        mode: '0644'
        timeout: 120
      ignore_errors: yes
      tags: setup

    - name: Extract SCAP Security Guide
      ansible.builtin.unarchive:
        src: "/tmp/scap-security-guide.zip"
        dest: "/tmp/"
        remote_src: yes
      ignore_errors: yes
      tags: setup

    - name: Copy all SCAP profiles
      ansible.builtin.shell: |
        if [ -d "/tmp/scap-security-guide-{{ scap_guide_version }}" ]; then
          find "/tmp/scap-security-guide-{{ scap_guide_version }}" -name "*ds.xml" -exec cp {} "{{ scap_profiles_dir }}/" \;
        fi
        ls -la "{{ scap_profiles_dir }}/"
      ignore_errors: yes
      tags: setup

    # Task 6: Determine profile to use
    - name: Set profile name
      ansible.builtin.set_fact:
        profile_name: >-
          {%- if ansible_distribution | lower == 'ubuntu' -%}
            {%- if ansible_distribution_major_version == '18' -%}
              ssg-ubuntu1804-ds.xml
            {%- elif ansible_distribution_major_version == '20' -%}
              ssg-ubuntu2004-ds.xml
            {%- elif ansible_distribution_major_version == '22' -%}
              ssg-ubuntu2204-ds.xml
            {%- elif ansible_distribution_major_version == '24' -%}
              ssg-ubuntu2404-ds.xml
            {%- else -%}
              ssg-ubuntu2004-ds.xml
            {%- endif -%}
          {%- elif ansible_distribution | lower == 'almalinux' -%}
            ssg-almalinux{{ ansible_distribution_major_version | default('8') }}-ds.xml
          {%- elif ansible_distribution | lower in ['rocky', 'rockylinux'] -%}
            ssg-rhel{{ ansible_distribution_major_version | default('8') }}-ds.xml
          {%- elif ansible_distribution | lower in ['centos', 'rhel', 'redhat'] -%}
            ssg-rhel{{ ansible_distribution_major_version | default('8') }}-ds.xml
          {%- else -%}
            ssg-rhel8-ds.xml
          {%- endif -%}
      tags: scan

    # Task 7: Find the profile file with better search
    - name: Search for SCAP profile files
      ansible.builtin.shell: |
        echo "=== Searching for SCAP profiles ==="
        echo "Target profile: {{ profile_name }}"
        echo "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
        
        # Search in multiple locations
        PROFILE_FOUND=""
        
        # Check specific profile first
        for dir in "{{ scap_profiles_dir }}" "/usr/share/xml/scap/ssg/content" "/usr/share/scap-security-guide"; do
          if [ -f "$dir/{{ profile_name }}" ]; then
            PROFILE_FOUND="$dir/{{ profile_name }}"
            echo "✓ Found exact match: $PROFILE_FOUND"
            break
          fi
        done
        
        # If not found, search for any compatible profile
        if [ -z "$PROFILE_FOUND" ]; then
          echo "Exact profile not found, searching for alternatives..."
          
          # For AlmaLinux, try RHEL profiles as fallback
          {% if ansible_distribution | lower == 'almalinux' %}
          for dir in "{{ scap_profiles_dir }}" "/usr/share/xml/scap/ssg/content" "/usr/share/scap-security-guide"; do
            RHEL_PROFILE="$dir/ssg-rhel{{ ansible_distribution_major_version | default('9') }}-ds.xml"
            if [ -f "$RHEL_PROFILE" ]; then
              PROFILE_FOUND="$RHEL_PROFILE"
              echo "✓ Found RHEL fallback for AlmaLinux: $PROFILE_FOUND"
              break
            fi
          done
          {% endif %}
          
          # General fallback - find any profile for this OS
          if [ -z "$PROFILE_FOUND" ]; then
            {% if ansible_distribution | lower == 'ubuntu' %}
            SEARCH_PATTERN="*ubuntu*ds.xml"
            {% elif ansible_distribution | lower == 'almalinux' %}
            SEARCH_PATTERN="*rhel*ds.xml"
            {% else %}
            SEARCH_PATTERN="*rhel*ds.xml"
            {% endif %}
            
            PROFILE_FOUND=$(find {{ scap_profiles_dir }} /usr/share -name "$SEARCH_PATTERN" -type f 2>/dev/null | head -1)
            if [ -n "$PROFILE_FOUND" ]; then
              echo "✓ Found compatible profile: $PROFILE_FOUND"
            fi
          fi
        fi
        
        # List all available profiles for debugging
        echo "=== All available profiles ==="
        find {{ scap_profiles_dir }} /usr/share -name "*ds.xml" -type f 2>/dev/null | head -10
        
        if [ -n "$PROFILE_FOUND" ]; then
          echo "$PROFILE_FOUND"
        else
          echo "ERROR: No compatible profile found"
          exit 1
        fi
      register: profile_search_detailed
      ignore_errors: yes
      tags: scan

    - name: Display profile search results
      ansible.builtin.debug:
        msg: "{{ profile_search_detailed.stdout_lines | default(['Profile search failed']) }}"
      tags: scan

    - name: Set profile path from search results
      ansible.builtin.set_fact:
        profile_path: "{{ profile_search_detailed.stdout_lines[-1] if profile_search_detailed.rc == 0 else '' }}"
      when: profile_search_detailed is defined
      tags: scan

    # Task 8b: Debug profile file status
    - name: Debug profile file status
      ansible.builtin.shell: |
        echo "=== DEBUGGING PROFILE FILES ==="
        echo "Expected profile: {{ profile_path }}"
        echo "Profile name: {{ profile_name }}"
        echo ""
        
        # Check if file exists
        if [ -f "{{ profile_path }}" ]; then
          echo "✓ Profile file exists"
          ls -la "{{ profile_path }}"
        else
          echo "✗ Profile file NOT found: {{ profile_path }}"
        fi
        
        echo ""
        echo "Contents of {{ scap_profiles_dir }}:"
        ls -la "{{ scap_profiles_dir }}/" 2>/dev/null || echo "Directory does not exist"
        
        echo ""
        echo "Available profile files:"
        find {{ scap_profiles_dir }} /usr/share -name "*ds.xml" -type f 2>/dev/null | head -10
        
        echo ""
        echo "Testing oscap command:"
        which oscap 2>/dev/null || echo "oscap not found"
        oscap --version 2>/dev/null || echo "Cannot get oscap version"
      register: debug_profile
      ignore_errors: yes
      tags: scan

    - name: Show debug results
      ansible.builtin.debug:
        msg: "{{ debug_profile.stdout_lines }}"
      tags: scan

    # Task 9: Execute OpenSCAP scan (simplified and more reliable)
    - name: Check prerequisites for scan
      ansible.builtin.shell: |
        # Check oscap command
        if ! command -v oscap >/dev/null 2>&1; then
          echo "ERROR: oscap command not found"
          exit 1
        fi
        
        # Check profile file
        if [ ! -f "{{ profile_path }}" ]; then
          echo "ERROR: Profile file not found: {{ profile_path }}"
          exit 1
        fi
        
        echo "SUCCESS: Prerequisites met"
        echo "oscap: $(which oscap)"
        echo "profile: {{ profile_path }}"
      register: prereq_check
      when: profile_path is defined and profile_path != ""
      ignore_errors: yes
      tags: scan

    # Task 10: Very simple OpenSCAP scan
    - name: Execute OpenSCAP scan (simplified)
      ansible.builtin.shell: |
        echo "=== SIMPLE OSCAP SCAN ==="
        echo "Profile: {{ profile_path }}"
        
        # Get ANY profile from the file
        FIRST_PROFILE=$(oscap info "{{ profile_path }}" | grep "Profile:" | head -1 | awk '{print $2}')
        
        echo "Using profile: $FIRST_PROFILE"
        
        # Simple scan command
        oscap xccdf eval \
          --profile "$FIRST_PROFILE" \
          --results-arf "{{ scap_reports_dir }}/{{ scan_timestamp }}-arf.xml" \
          "{{ profile_path }}"
        
        echo "Scan finished with RC: $?"
        
        # Check if ARF file was created
        if [ -f "{{ scap_reports_dir }}/{{ scan_timestamp }}-arf.xml" ]; then
          echo "ARF file created successfully"
        else
          echo "ARF file NOT created"
        fi
      register: oscap_result
      when: 
        - simple_check is defined 
        - simple_check.rc == 0
      ignore_errors: yes
      tags: scan

    # Task 11: Display scan results
    - name: Display scan results
      ansible.builtin.debug:
        msg: |
          OpenSCAP Scan Results:
          - Host: {{ inventory_hostname }}
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Profile: {{ profile_name }}
          - Profile Path: {{ profile_path | default('Not found') }}
          - Prerequisites: {{ 'OK' if (simple_check is defined and simple_check.rc == 0) else 'Failed' }}
          - Scan Status: {{ 'Success' if (oscap_result is defined and oscap_result.rc is defined and oscap_result.rc in [0, 2]) else 'Failed/Skipped' }}
          
          {% if oscap_result is defined and oscap_result.stdout is defined %}
          Scan Output:
          {{ oscap_result.stdout }}
          {% endif %}
          
          {% if oscap_result is defined and oscap_result.stderr is defined and oscap_result.stderr != '' %}
          Scan Errors:
          {{ oscap_result.stderr }}
          {% endif %}
      tags: scan

    # Task 12: Check if ARF file exists and fix timezone
    - name: Check ARF file status
      ansible.builtin.stat:
        path: "{{ scap_reports_dir }}/{{ scan_timestamp }}-arf.xml"
      register: arf_check
      when: oscap_result is defined and oscap_result.rc is defined and oscap_result.rc in [0, 2]
      tags: post_scan

    - name: Fix timezone in ARF file
      ansible.builtin.replace:
        path: "{{ scap_reports_dir }}/{{ scan_timestamp }}-arf.xml"
        regexp: '([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2})(?![+\-Z0-9:])'
        replace: '\1{{ timezone_offset }}'
      when: 
        - arf_check.stat.exists | default(false)
        - arf_check.stat.size | default(0) > 0
      ignore_errors: yes
      tags: post_scan

    # Task 13: Upload report (simplified)
    - name: Upload ARF report
      ansible.builtin.shell: |
        ARF_FILE="{{ scap_reports_dir }}/{{ scan_timestamp }}-arf.xml"
        
        if [ ! -f "$ARF_FILE" ]; then
          echo "No ARF file to upload: $ARF_FILE"
          exit 1
        fi
        
        SIZE=$(stat -c%s "$ARF_FILE")
        echo "Uploading $ARF_FILE ($SIZE bytes)"
        
        curl -f -X POST \
          -F "target={{ inventory_hostname }}" \
          -F "report=@$ARF_FILE" \
          "{{ report_server }}/upload"
      register: upload_result
      when: 
        - arf_check is defined
        - arf_check.stat.exists | default(false)
        - arf_check.stat.size | default(0) > 0
      ignore_errors: yes
      tags: post_scan

    # Task 13: Trigger report rendering
    - name: Trigger report rendering
      ansible.builtin.uri:
        url: "{{ report_server }}/render"
        method: GET
        timeout: 30
      when: upload_result is defined and upload_result.rc == 0
      ignore_errors: yes
      tags: post_scan

    # Task 14: Final summary
    - name: Display final summary
      ansible.builtin.debug:
        msg: |
          === OpenSCAP Compliance Scan Summary ===
          Host: {{ inventory_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Profile Used: {{ profile_path }}
          Scan Status: {{ 'Success' if (oscap_result.rc | default(99)) in [0, 2] else 'Failed' }}
          ARF File: {{ 'Created' if (arf_check.stat.exists | default(false)) else 'Not Created' }}
          Upload Status: {{ 'Success' if (upload_result is defined and upload_result.rc == 0) else 'Failed/Skipped' }}
          Reports Location: {{ scap_reports_dir }}/{{ scan_timestamp }}-*
      tags: always
