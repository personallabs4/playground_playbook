---
- name: OpenSCAP Security Compliance Scan (Simplified)
  hosts: all
  become: yes
  vars:
    scap_reports_dir: "/opt/reports"
    scap_profiles_dir: "/opt/scap_profiles"
    scap_guide_version: "0.1.76"
    timezone_offset: "+07:00"
    report_server: "http://10.20.11.117:2112"

  tasks:
    # Task 1: Update package cache and install basic tools
    - name: Update package cache
      ansible.builtin.package:
        update_cache: yes
      ignore_errors: yes
      tags: setup

    - name: Install basic tools
      ansible.builtin.package:
        name:
          - curl
          - wget
          - unzip
        state: present
      ignore_errors: yes
      tags: setup

    # Task 2: Install OpenSCAP packages based on OS and version
    - name: Install OpenSCAP packages for Ubuntu < 24.04
      ansible.builtin.package:
        name:
          - openscap-utils
          - libopenscap8
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower == "ubuntu"
        - ansible_distribution_major_version | int < 24
      register: ubuntu_old_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for Ubuntu >= 24.04
      ansible.builtin.package:
        name:
          - openscap-scanner
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower == "ubuntu"
        - ansible_distribution_major_version | int >= 24
      register: ubuntu_new_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for Debian (non-Ubuntu)
      ansible.builtin.package:
        name:
          - openscap-utils
          - libopenscap8
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower != "ubuntu"
      register: debian_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for AlmaLinux
      ansible.builtin.package:
        name:
          - openscap-scanner
          - scap-security-guide
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution | lower in ['almalinux', 'alma']
      register: alma_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for other RHEL-based systems
      ansible.builtin.package:
        name:
          - openscap-scanner
          - scap-security-guide
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution | lower not in ['almalinux', 'alma']
      register: rhel_install
      ignore_errors: yes
      tags: setup

    - name: Display OpenSCAP installation results
      ansible.builtin.debug:
        msg: |
          OpenSCAP Installation Results:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - OS Family: {{ ansible_os_family }}
          - Package Installation Status:
            {% if ansible_os_family == "Debian" and ansible_distribution | lower == "ubuntu" %}
              {% if ansible_distribution_major_version | int < 24 %}
                Ubuntu < 24.04: {{ 'Success' if (ubuntu_old_install is defined and ubuntu_old_install is succeeded) else 'Failed' }}
                Packages: openscap-utils, libopenscap8
              {% else %}
                Ubuntu >= 24.04: {{ 'Success' if (ubuntu_new_install is defined and ubuntu_new_install is succeeded) else 'Failed' }}
                Packages: openscap-scanner, openscap-utils
              {% endif %}
            {% elif ansible_os_family == "Debian" %}
              Debian: {{ 'Success' if (debian_install is defined and debian_install is succeeded) else 'Failed' }}
              Packages: openscap-utils, libopenscap8
            {% elif ansible_distribution | lower in ['almalinux', 'alma'] %}
              AlmaLinux: {{ 'Success' if (alma_install is defined and alma_install is succeeded) else 'Failed' }}
              Packages: openscap-scanner, scap-security-guide, openscap-utils
            {% elif ansible_os_family == "RedHat" %}
              RHEL-based: {{ 'Success' if (rhel_install is defined and rhel_install is succeeded) else 'Failed' }}
              Packages: openscap-scanner, scap-security-guide, openscap-utils
            {% endif %}
      tags: setup

    # Task 3: Gather OS information
    - name: Gather OS facts
      ansible.builtin.setup:
        gather_subset:
          - distribution
      tags: always

    # Task 4: Create required directories
    - name: Create directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ scap_reports_dir }}"
        - "{{ scap_profiles_dir }}"
      tags: setup

    # Task 5: Download SCAP Security Guide (universal fallback)
    - name: Download SCAP Security Guide
      ansible.builtin.get_url:
        url: "https://github.com/ComplianceAsCode/content/releases/download/v{{ scap_guide_version }}/scap-security-guide-{{ scap_guide_version }}.zip"
        dest: "/tmp/scap-security-guide.zip"
        mode: '0644'
        timeout: 120
      ignore_errors: yes
      tags: setup

    - name: Extract SCAP Security Guide
      ansible.builtin.unarchive:
        src: "/tmp/scap-security-guide.zip"
        dest: "/tmp/"
        remote_src: yes
      ignore_errors: yes
      tags: setup

    - name: Copy SCAP profiles to target directory (OS-specific)
      ansible.builtin.shell: |
        echo "=== COPYING OS-SPECIFIC SCAP PROFILES ==="
        echo "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
        
        # Clear target directory first
        rm -f {{ scap_profiles_dir }}/*.xml 2>/dev/null || true
        
        # Define which profiles to copy based on OS
        {% if ansible_distribution | lower == 'ubuntu' %}
        echo "Ubuntu detected - copying Ubuntu profiles"
        SEARCH_PATTERNS="*ubuntu*ds.xml"
        {% elif ansible_distribution | lower == 'almalinux' %}
        echo "AlmaLinux detected - copying RHEL profiles for AlmaLinux"
        SEARCH_PATTERNS="*rhel*ds.xml"
        {% elif ansible_distribution | lower in ['rocky', 'rockylinux'] %}
        echo "Rocky Linux detected - copying RHEL profiles for Rocky"
        SEARCH_PATTERNS="*rhel*ds.xml"
        {% elif ansible_distribution | lower in ['centos', 'rhel', 'redhat'] %}
        echo "RHEL/CentOS detected - copying RHEL profiles"
        SEARCH_PATTERNS="*rhel*ds.xml"
        {% else %}
        echo "Other OS detected - copying RHEL profiles as fallback"
        SEARCH_PATTERNS="*rhel*ds.xml"
        {% endif %}
        
        # Copy matching profiles
        COPIED_COUNT=0
        for pattern in $SEARCH_PATTERNS; do
          echo "Searching for pattern: $pattern"
          for source_file in $(find /tmp/scap-security-guide-* /usr/share -name "$pattern" -type f 2>/dev/null); do
            if [ -f "$source_file" ]; then
              filename=$(basename "$source_file")
              cp "$source_file" "{{ scap_profiles_dir }}/$filename"
              echo "✓ Copied: $filename"
              COPIED_COUNT=$((COPIED_COUNT + 1))
            fi
          done
        done
        
        {% if ansible_distribution | lower == 'ubuntu' %}
        # For Ubuntu, also copy best-match version-specific profiles
        VERSION="{{ ansible_distribution_major_version }}"
        echo "Looking for Ubuntu $VERSION specific profiles..."
        
        for source_file in $(find /tmp/scap-security-guide-* /usr/share -name "*ubuntu${VERSION}*ds.xml" -o -name "*ubuntu20*ds.xml" -type f 2>/dev/null); do
          if [ -f "$source_file" ]; then
            filename=$(basename "$source_file")
            cp "$source_file" "{{ scap_profiles_dir }}/$filename"
            echo "✓ Copied Ubuntu specific: $filename"
            COPIED_COUNT=$((COPIED_COUNT + 1))
          fi
        done
        {% endif %}
        
        echo ""
        echo "=== COPY SUMMARY ==="
        echo "Total files copied: $COPIED_COUNT"
        echo "Files in {{ scap_profiles_dir }}:"
        ls -la {{ scap_profiles_dir }}/*.xml 2>/dev/null || echo "No XML files found"
        
        if [ $COPIED_COUNT -eq 0 ]; then
          echo "WARNING: No matching profiles found for {{ ansible_distribution }}"
          echo "Available source files:"
          find /tmp/scap-security-guide-* /usr/share -name "*ds.xml" -type f 2>/dev/null | head -10
        fi
      ignore_errors: yes
      tags: setup

    # Task 6: Determine profile to use
    - name: Set profile name
      ansible.builtin.set_fact:
        profile_name: >-
          {%- if ansible_distribution | lower == 'ubuntu' -%}
            {%- if ansible_distribution_major_version == '18' -%}
              ssg-ubuntu1804-ds.xml
            {%- elif ansible_distribution_major_version == '20' -%}
              ssg-ubuntu2004-ds.xml
            {%- elif ansible_distribution_major_version == '22' -%}
              ssg-ubuntu2204-ds.xml
            {%- elif ansible_distribution_major_version == '24' -%}
              ssg-ubuntu2404-ds.xml
            {%- else -%}
              ssg-ubuntu2004-ds.xml
            {%- endif -%}
          {%- elif ansible_distribution | lower == 'almalinux' -%}
            ssg-almalinux{{ ansible_distribution_major_version | default('8') }}-ds.xml
          {%- elif ansible_distribution | lower in ['rocky', 'rockylinux'] -%}
            ssg-rhel{{ ansible_distribution_major_version | default('8') }}-ds.xml
          {%- elif ansible_distribution | lower in ['centos', 'rhel', 'redhat'] -%}
            ssg-rhel{{ ansible_distribution_major_version | default('8') }}-ds.xml
          {%- else -%}
            ssg-rhel8-ds.xml
          {%- endif -%}
      tags: scan

    # Task 7: Find the profile file with better search
    - name: Search for SCAP profile files
      ansible.builtin.shell: |
        echo "=== Searching for SCAP profiles ==="
        echo "Target profile: {{ profile_name }}"
        echo "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
        
        # Search in multiple locations
        PROFILE_FOUND=""
        
        # Check specific profile first
        for dir in "{{ scap_profiles_dir }}" "/usr/share/xml/scap/ssg/content" "/usr/share/scap-security-guide"; do
          if [ -f "$dir/{{ profile_name }}" ]; then
            PROFILE_FOUND="$dir/{{ profile_name }}"
            echo "✓ Found exact match: $PROFILE_FOUND"
            break
          fi
        done
        
        # If not found, search for any compatible profile
        if [ -z "$PROFILE_FOUND" ]; then
          echo "Exact profile not found, searching for alternatives..."
          
          # For AlmaLinux, try RHEL profiles as fallback
          {% if ansible_distribution | lower == 'almalinux' %}
          for dir in "{{ scap_profiles_dir }}" "/usr/share/xml/scap/ssg/content" "/usr/share/scap-security-guide"; do
            RHEL_PROFILE="$dir/ssg-rhel{{ ansible_distribution_major_version | default('9') }}-ds.xml"
            if [ -f "$RHEL_PROFILE" ]; then
              PROFILE_FOUND="$RHEL_PROFILE"
              echo "✓ Found RHEL fallback for AlmaLinux: $PROFILE_FOUND"
              break
            fi
          done
          {% endif %}
          
          # General fallback - find any profile for this OS
          if [ -z "$PROFILE_FOUND" ]; then
            {% if ansible_distribution | lower == 'ubuntu' %}
            SEARCH_PATTERN="*ubuntu*ds.xml"
            {% elif ansible_distribution | lower == 'almalinux' %}
            SEARCH_PATTERN="*rhel*ds.xml"
            {% else %}
            SEARCH_PATTERN="*rhel*ds.xml"
            {% endif %}
            
            PROFILE_FOUND=$(find {{ scap_profiles_dir }} /usr/share -name "$SEARCH_PATTERN" -type f 2>/dev/null | head -1)
            if [ -n "$PROFILE_FOUND" ]; then
              echo "✓ Found compatible profile: $PROFILE_FOUND"
            fi
          fi
        fi
        
        # List all available profiles for debugging
        echo "=== All available profiles ==="
        find {{ scap_profiles_dir }} /usr/share -name "*ds.xml" -type f 2>/dev/null | head -10
        
        if [ -n "$PROFILE_FOUND" ]; then
          echo "$PROFILE_FOUND"
        else
          echo "ERROR: No compatible profile found"
          exit 1
        fi
      register: profile_search_detailed
      ignore_errors: yes
      tags: scan

    - name: Display profile search results
      ansible.builtin.debug:
        msg: "{{ profile_search_detailed.stdout_lines | default(['Profile search failed']) }}"
      tags: scan

    # Task 8c: Force set profile path if search failed
    - name: Force set profile path if search failed
      ansible.builtin.set_fact:
        profile_path: >-
          {%- if profile_search_detailed.rc == 0 and profile_search_detailed.stdout_lines[-1] is defined -%}
            {{ profile_search_detailed.stdout_lines[-1] }}
          {%- else -%}
            {%- if ansible_distribution | lower == 'ubuntu' -%}
              /opt/scap_profiles/ssg-ubuntu2004-ds.xml
            {%- elif ansible_distribution | lower == 'almalinux' -%}
              /usr/share/xml/scap/ssg/content/ssg-rhel{{ ansible_distribution_major_version | default('9') }}-ds.xml
            {%- else -%}
              /usr/share/xml/scap/ssg/content/ssg-rhel8-ds.xml
            {%- endif -%}
          {%- endif -%}
      tags: scan

    - name: Show final profile path
      ansible.builtin.debug:
        msg: |
          Final Profile Selection:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Expected profile: {{ profile_name }}
          - Selected profile path: {{ profile_path }}
          - Search was successful: {{ profile_search_detailed.rc == 0 if profile_search_detailed is defined else 'No search performed' }}
      tags: scan

    # Task 9: Generate timestamp (moved here before scan)
    - name: Generate scan timestamp
      ansible.builtin.set_fact:
        scan_timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
      tags: scan

    # Task 8b: Debug profile file status
    - name: Debug profile file status
      ansible.builtin.shell: |
        echo "=== DEBUGGING PROFILE FILES ==="
        echo "Expected profile: {{ profile_path }}"
        echo "Profile name: {{ profile_name }}"
        echo ""
        
        # Check if file exists
        if [ -f "{{ profile_path }}" ]; then
          echo "✓ Profile file exists"
          ls -la "{{ profile_path }}"
        else
          echo "✗ Profile file NOT found: {{ profile_path }}"
        fi
        
        echo ""
        echo "Contents of {{ scap_profiles_dir }}:"
        ls -la "{{ scap_profiles_dir }}/" 2>/dev/null || echo "Directory does not exist"
        
        echo ""
        echo "Available profile files:"
        find {{ scap_profiles_dir }} /usr/share -name "*ds.xml" -type f 2>/dev/null | head -10
        
        echo ""
        echo "Testing oscap command:"
        which oscap 2>/dev/null || echo "oscap not found"
        oscap --version 2>/dev/null || echo "Cannot get oscap version"
      register: debug_profile
      ignore_errors: yes
      tags: scan

    - name: Show debug results
      ansible.builtin.debug:
        msg: "{{ debug_profile.stdout_lines }}"
      tags: scan

    # Task 9: Execute OpenSCAP scan (simplified and more reliable)
    - name: Check prerequisites for scan
      ansible.builtin.shell: |
        # Check oscap command
        if ! command -v oscap >/dev/null 2>&1; then
          echo "ERROR: oscap command not found"
          exit 1
        fi
        
        # Check profile file
        if [ ! -f "{{ profile_path }}" ]; then
          echo "ERROR: Profile file not found: {{ profile_path }}"
          exit 1
        fi
        
        echo "SUCCESS: Prerequisites met"
        echo "oscap: $(which oscap)"
        echo "profile: {{ profile_path }}"
      register: prereq_check
      when: profile_path is defined and profile_path != ""
      ignore_errors: yes
      tags: scan

    # Task 10: Find OS-appropriate profile and scan
    - name: Find OS-appropriate profile in /opt/scap_profiles
      ansible.builtin.shell: |
        echo "=== FINDING OS-APPROPRIATE PROFILE ==="
        echo "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
        echo "Looking in: {{ scap_profiles_dir }}"
        
        # List all available profiles
        echo "Available profiles:"
        ls -la {{ scap_profiles_dir }}/*.xml 2>/dev/null || echo "No XML files found"
        
        SELECTED_PROFILE=""
        
        {% if ansible_distribution | lower == 'ubuntu' %}
        # For Ubuntu, prefer version-specific, then generic Ubuntu
        echo "Ubuntu - looking for version-specific profiles first..."
        
        VERSION="{{ ansible_distribution_major_version }}"
        for pattern in "ubuntu${VERSION}" "ubuntu20" "ubuntu22" "ubuntu"; do
          PROFILE=$(find {{ scap_profiles_dir }} -name "*${pattern}*ds.xml" -type f 2>/dev/null | head -1)
          if [ -n "$PROFILE" ]; then
            SELECTED_PROFILE="$PROFILE"
            echo "✓ Selected Ubuntu profile: $SELECTED_PROFILE"
            break
          fi
        done
        {% else %}
        # For RHEL-based systems, prefer version-specific RHEL
        echo "RHEL-based - looking for RHEL profiles..."
        
        VERSION="{{ ansible_distribution_major_version | default('9') }}"
        for pattern in "rhel${VERSION}" "rhel9" "rhel8" "rhel"; do
          PROFILE=$(find {{ scap_profiles_dir }} -name "*${pattern}*ds.xml" -type f 2>/dev/null | head -1)
          if [ -n "$PROFILE" ]; then
            SELECTED_PROFILE="$PROFILE"
            echo "✓ Selected RHEL profile: $SELECTED_PROFILE"
            break
          fi
        done
        {% endif %}
        
        # Fallback to any available profile
        if [ -z "$SELECTED_PROFILE" ]; then
          echo "No OS-specific profile found, using any available profile..."
          SELECTED_PROFILE=$(find {{ scap_profiles_dir }} -name "*ds.xml" -type f 2>/dev/null | head -1)
          if [ -n "$SELECTED_PROFILE" ]; then
            echo "✓ Selected fallback profile: $SELECTED_PROFILE"
          fi
        fi
        
        if [ -z "$SELECTED_PROFILE" ]; then
          echo "ERROR: No SCAP profiles found in {{ scap_profiles_dir }}"
          exit 1
        fi
        
        echo "$SELECTED_PROFILE"
      register: profile_selection
      ignore_errors: yes
      tags: scan

    - name: Show profile selection result
      ansible.builtin.debug:
        msg: "{{ profile_selection.stdout_lines }}"
      tags: scan

    - name: Execute OpenSCAP scan with selected profile
      ansible.builtin.shell: |
        PROFILE_FILE="{{ profile_selection.stdout_lines[-1] }}"
        
        echo "=== EXECUTING OSCAP SCAN ==="
        echo "Selected profile: $PROFILE_FILE"
        
        # Verify file exists
        if [ ! -f "$PROFILE_FILE" ]; then
          echo "ERROR: Profile file not found: $PROFILE_FILE"
          exit 1
        fi
        
        # Get first available profile ID
        echo "Getting profile ID..."
        PROFILE_ID=$(oscap info "$PROFILE_FILE" | grep "Profile:" | head -1 | awk '{print $2}')
        
        if [ -z "$PROFILE_ID" ]; then
          echo "ERROR: No profiles found in datastream"
          exit 1
        fi
        
        echo "Using profile ID: $PROFILE_ID"
        
        # Generate timestamp
        TIMESTAMP=$(date +%Y%m%dT%H%M%S)
        echo "Timestamp: $TIMESTAMP"
        
        # Execute scan
        echo "Starting scan..."
        oscap xccdf eval \
          --profile "$PROFILE_ID" \
          --results-arf "{{ scap_reports_dir }}/${TIMESTAMP}-arf.xml" \
          "$PROFILE_FILE"
        
        SCAN_RC=$?
        echo "Scan completed with return code: $SCAN_RC"
        
        # Verify ARF file creation
        ARF_FILE="{{ scap_reports_dir }}/${TIMESTAMP}-arf.xml"
        if [ -f "$ARF_FILE" ]; then
          echo "✓ ARF file created: $ARF_FILE"
          ls -la "$ARF_FILE"
        else
          echo "✗ ARF file not created"
        fi
        
        exit $SCAN_RC
      register: oscap_scan_result
      when: 
        - profile_selection is defined
        - profile_selection.rc == 0
        - profile_selection.stdout_lines is defined
        - profile_selection.stdout_lines | length > 0
      ignore_errors: yes
      tags: scan

    # Task 11: Display scan results (simplified)
    - name: Display scan results
      ansible.builtin.debug:
        msg: |
          OpenSCAP Scan Results:
          - Host: {{ inventory_hostname }}
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Available Profiles: {{ profile_search_simple.stdout_lines | length if profile_search_simple.stdout_lines is defined else 0 }}
          - OSCAP Test: {{ 'OK' if (oscap_test is defined and oscap_test.rc == 0) else 'Failed' }}
          - Scan Executed: {{ 'Yes' if (simple_scan is defined) else 'No - Skipped' }}
          - Scan Status: {{ 'Success' if (simple_scan is defined and simple_scan.rc is defined and simple_scan.rc in [0, 2]) else 'Failed/Skipped' }}
          
          {% if simple_scan is defined and simple_scan.stdout is defined %}
          Scan Output:
          {{ simple_scan.stdout }}
          {% endif %}
          
          {% if simple_scan is defined and simple_scan.stderr is defined and simple_scan.stderr != '' %}
          Scan Errors:
          {{ simple_scan.stderr }}
          {% endif %}
      tags: scan

    # Task 12: Simplified post-processing
    - name: Find ARF files created
      ansible.builtin.shell: |
        find {{ scap_reports_dir }} -name "*-arf.xml" -type f -mmin -10 2>/dev/null | head -1
      register: find_arf
      when: simple_scan is defined and simple_scan.rc is defined and simple_scan.rc in [0, 2]
      ignore_errors: yes
      tags: post_scan

    - name: Upload ARF report if found
      ansible.builtin.shell: |
        ARF_FILE="{{ find_arf.stdout.strip() }}"
        
        if [ -z "$ARF_FILE" ] || [ ! -f "$ARF_FILE" ]; then
          echo "No recent ARF file found"
          exit 1
        fi
        
        echo "Found ARF file: $ARF_FILE"
        SIZE=$(stat -c%s "$ARF_FILE")
        echo "File size: $SIZE bytes"
        
        curl -f -X POST \
          -F "target={{ inventory_hostname }}" \
          -F "report=@$ARF_FILE" \
          "{{ report_server }}/upload"
      register: upload_result
      when: 
        - find_arf is defined
        - find_arf.stdout is defined
        - find_arf.stdout != ""
      ignore_errors: yes
      tags: post_scan

    # Task 13: Trigger report rendering
    - name: Trigger report rendering
      ansible.builtin.uri:
        url: "{{ report_server }}/render"
        method: GET
        timeout: 30
      when: upload_result is defined and upload_result.rc == 0
      ignore_errors: yes
      tags: post_scan

    # Task 14: Final summary
    - name: Display final summary
      ansible.builtin.debug:
        msg: |
          === OpenSCAP Compliance Scan Summary ===
          Host: {{ inventory_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Profile Used: {{ profile_path }}
          Scan Status: {{ 'Success' if (oscap_result.rc | default(99)) in [0, 2] else 'Failed' }}
          ARF File: {{ 'Created' if (arf_check.stat.exists | default(false)) else 'Not Created' }}
          Upload Status: {{ 'Success' if (upload_result is defined and upload_result.rc == 0) else 'Failed/Skipped' }}
          Reports Location: {{ scap_reports_dir }}/{{ scan_timestamp }}-*
      tags: always
