---
- name: OpenSCAP Security Compliance Scan (Simplified)
  hosts: all
  become: yes
  vars:
    scap_reports_dir: "/opt/reports"
    scap_profiles_dir: "/opt/scap_profiles"
    scap_guide_version: "0.1.76"
    timezone_offset: "+07:00"
    report_server: "http://10.20.11.117:2112"

  tasks:
    # Task 1: Update package cache and install basic tools
    - name: Update package cache
      ansible.builtin.package:
        update_cache: yes
      ignore_errors: yes
      tags: setup

    - name: Install basic tools
      ansible.builtin.package:
        name:
          - curl
          - wget
          - unzip
        state: present
      ignore_errors: yes
      tags: setup

    # Task 2: Install OpenSCAP packages based on OS and version
    - name: Install OpenSCAP packages for Ubuntu < 24.04
      ansible.builtin.package:
        name:
          - openscap-utils
          - libopenscap8
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower == "ubuntu"
        - ansible_distribution_major_version | int < 24
      register: ubuntu_old_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for Ubuntu >= 24.04
      ansible.builtin.package:
        name:
          - openscap-scanner
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower == "ubuntu"
        - ansible_distribution_major_version | int >= 24
      register: ubuntu_new_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for Debian (non-Ubuntu)
      ansible.builtin.package:
        name:
          - openscap-utils
          - libopenscap8
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower != "ubuntu"
      register: debian_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for AlmaLinux
      ansible.builtin.package:
        name:
          - openscap-scanner
          - scap-security-guide
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution | lower in ['almalinux', 'alma']
      register: alma_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for other RHEL-based systems
      ansible.builtin.package:
        name:
          - openscap-scanner
          - scap-security-guide
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution | lower not in ['almalinux', 'alma']
      register: rhel_install
      ignore_errors: yes
      tags: setup

    - name: Display OpenSCAP installation results
      ansible.builtin.debug:
        msg: |
          OpenSCAP Installation Results:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - OS Family: {{ ansible_os_family }}
          - Package Installation Status:
            {% if ansible_os_family == "Debian" and ansible_distribution | lower == "ubuntu" %}
              {% if ansible_distribution_major_version | int < 24 %}
                Ubuntu < 24.04: {{ 'Success' if (ubuntu_old_install is defined and ubuntu_old_install is succeeded) else 'Failed' }}
                Packages: openscap-utils, libopenscap8
              {% else %}
                Ubuntu >= 24.04: {{ 'Success' if (ubuntu_new_install is defined and ubuntu_new_install is succeeded) else 'Failed' }}
                Packages: openscap-scanner, openscap-utils
              {% endif %}
            {% elif ansible_os_family == "Debian" %}
              Debian: {{ 'Success' if (debian_install is defined and debian_install is succeeded) else 'Failed' }}
              Packages: openscap-utils, libopenscap8
            {% elif ansible_distribution | lower in ['almalinux', 'alma'] %}
              AlmaLinux: {{ 'Success' if (alma_install is defined and alma_install is succeeded) else 'Failed' }}
              Packages: openscap-scanner, scap-security-guide, openscap-utils
            {% elif ansible_os_family == "RedHat" %}
              RHEL-based: {{ 'Success' if (rhel_install is defined and rhel_install is succeeded) else 'Failed' }}
              Packages: openscap-scanner, scap-security-guide, openscap-utils
            {% endif %}
      tags: setup

    # Task 3: Gather OS information
    - name: Gather OS facts
      ansible.builtin.setup:
        gather_subset:
          - distribution
      tags: always

    # Task 4: Create required directories
    - name: Create directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ scap_reports_dir }}"
        - "{{ scap_profiles_dir }}"
      tags: setup

    # Task 5: Download SCAP Security Guide (universal fallback)
    - name: Download SCAP Security Guide
      ansible.builtin.get_url:
        url: "https://github.com/ComplianceAsCode/content/releases/download/v{{ scap_guide_version }}/scap-security-guide-{{ scap_guide_version }}.zip"
        dest: "/tmp/scap-security-guide.zip"
        mode: '0644'
        timeout: 120
      ignore_errors: yes
      tags: setup

    - name: Extract SCAP Security Guide
      ansible.builtin.unarchive:
        src: "/tmp/scap-security-guide.zip"
        dest: "/tmp/"
        remote_src: yes
      ignore_errors: yes
      tags: setup

    - name: Copy all SCAP profiles
      ansible.builtin.shell: |
        if [ -d "/tmp/scap-security-guide-{{ scap_guide_version }}" ]; then
          find "/tmp/scap-security-guide-{{ scap_guide_version }}" -name "*ds.xml" -exec cp {} "{{ scap_profiles_dir }}/" \;
        fi
        ls -la "{{ scap_profiles_dir }}/"
      ignore_errors: yes
      tags: setup

    # Task 6: Determine profile to use
    - name: Set profile name
      ansible.builtin.set_fact:
        profile_name: >-
          {%- if ansible_distribution | lower == 'ubuntu' -%}
            {%- if ansible_distribution_major_version == '18' -%}
              ssg-ubuntu1804-ds.xml
            {%- elif ansible_distribution_major_version == '20' -%}
              ssg-ubuntu2004-ds.xml
            {%- elif ansible_distribution_major_version == '22' -%}
              ssg-ubuntu2204-ds.xml
            {%- elif ansible_distribution_major_version == '24' -%}
              ssg-ubuntu2404-ds.xml
            {%- else -%}
              ssg-ubuntu2004-ds.xml
            {%- endif -%}
          {%- elif ansible_distribution | lower == 'almalinux' -%}
            ssg-almalinux{{ ansible_distribution_major_version | default('8') }}-ds.xml
          {%- elif ansible_distribution | lower in ['rocky', 'rockylinux'] -%}
            ssg-rhel{{ ansible_distribution_major_version | default('8') }}-ds.xml
          {%- elif ansible_distribution | lower in ['centos', 'rhel', 'redhat'] -%}
            ssg-rhel{{ ansible_distribution_major_version | default('8') }}-ds.xml
          {%- else -%}
            ssg-rhel8-ds.xml
          {%- endif -%}
      tags: scan

    # Task 7: Find the profile file
    - name: Find SCAP profile file
      ansible.builtin.shell: |
        # Look in common locations
        for dir in "{{ scap_profiles_dir }}" "/usr/share/xml/scap/ssg/content" "/usr/share/scap-security-guide"; do
          if [ -f "$dir/{{ profile_name }}" ]; then
            echo "$dir/{{ profile_name }}"
            exit 0
          fi
        done
        
        # Find any similar file
        find {{ scap_profiles_dir }} /usr/share -name "*{{ ansible_distribution | lower }}*ds.xml" -o -name "*rhel*ds.xml" 2>/dev/null | head -1
      register: profile_search
      ignore_errors: yes
      tags: scan

    - name: Set profile path
      ansible.builtin.set_fact:
        profile_path: "{{ profile_search.stdout.strip() if profile_search.stdout else '/usr/share/xml/scap/ssg/content/ssg-rhel8-ds.xml' }}"
      tags: scan

    # Task 8: Generate timestamp
    - name: Generate scan timestamp
      ansible.builtin.set_fact:
        scan_timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
      tags: scan

    # Task 9: Execute OpenSCAP scan with improved error handling
    - name: Check OpenSCAP installation
      ansible.builtin.shell: |
        echo "=== OpenSCAP Installation Check ==="
        echo "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
        
        # Check if oscap command exists
        if command -v oscap >/dev/null 2>&1; then
          echo "✓ oscap command found: $(which oscap)"
          echo "✓ oscap version: $(oscap --version 2>/dev/null | head -1 || echo 'Unknown')"
        else
          echo "✗ oscap command not found"
          echo "Available OpenSCAP related packages:"
          {% if ansible_os_family == "Debian" %}
          dpkg -l | grep -i openscap || echo "No OpenSCAP packages found"
          {% else %}
          rpm -qa | grep -i openscap || echo "No OpenSCAP packages found"
          {% endif %}
          exit 1
        fi
        
        # Check profile file
        echo "=== Profile File Check ==="
        echo "Expected profile: {{ profile_path }}"
        if [ -f "{{ profile_path }}" ]; then
          echo "✓ Profile file exists"
          echo "✓ File size: $(stat -c%s {{ profile_path }} 2>/dev/null || echo 'Unknown')"
        else
          echo "✗ Profile file not found"
          echo "Searching for alternative profiles..."
          find /usr/share {{ scap_profiles_dir }} -name "*ds.xml" -type f 2>/dev/null | head -5 || echo "No profiles found"
          exit 1
        fi
        
        echo "=== Ready to scan ==="
      register: precheck_result
      ignore_errors: yes
      tags: scan

    - name: Display pre-check results
      ansible.builtin.debug:
        msg: "{{ precheck_result.stdout_lines | default(['Pre-check failed']) }}"
      tags: scan

    - name: Execute OpenSCAP scan
      ansible.builtin.shell: |
        echo "=== Starting OpenSCAP Scan ==="
        echo "Timestamp: {{ scan_timestamp }}"
        echo "Profile: {{ profile_path }}"
        
        # Get first available profile from the datastream
        echo "=== Getting available profiles ==="
        AVAILABLE_PROFILES=$(oscap info "{{ profile_path }}" 2>/dev/null | grep "^[[:space:]]*Profile:" | head -5)
        echo "Available profiles:"
        echo "$AVAILABLE_PROFILES"
        
        # Select first profile
        PROFILE_ID=$(echo "$AVAILABLE_PROFILES" | head -1 | awk '{print $2}')
        
        if [ -z "$PROFILE_ID" ]; then
          echo "ERROR: No profiles found in datastream"
          exit 1
        fi
        
        echo "Using profile: $PROFILE_ID"
        
        # Execute scan
        echo "=== Executing scan ==="
        oscap xccdf eval \
          --profile "$PROFILE_ID" \
          --results-arf "{{ scap_reports_dir }}/{{ scan_timestamp }}-arf.xml" \
          --report "{{ scap_reports_dir }}/{{ scan_timestamp }}-report.html" \
          "{{ profile_path }}"
        
        SCAN_RC=$?
        echo "=== Scan completed with return code: $SCAN_RC ==="
        
        # Verify output files
        ARF_FILE="{{ scap_reports_dir }}/{{ scan_timestamp }}-arf.xml"
        HTML_FILE="{{ scap_reports_dir }}/{{ scan_timestamp }}-report.html"
        
        if [ -f "$ARF_FILE" ]; then
          ARF_SIZE=$(stat -c%s "$ARF_FILE" 2>/dev/null || echo "0")
          echo "✓ ARF file created: $ARF_FILE ($ARF_SIZE bytes)"
        else
          echo "✗ ARF file not created"
        fi
        
        if [ -f "$HTML_FILE" ]; then
          HTML_SIZE=$(stat -c%s "$HTML_FILE" 2>/dev/null || echo "0")
          echo "✓ HTML report created: $HTML_FILE ($HTML_SIZE bytes)"
        else
          echo "✗ HTML report not created"
        fi
        
        exit $SCAN_RC
      register: oscap_result
      when: precheck_result.rc == 0
      ignore_errors: yes
      tags: scan

    # Task 10: Check scan results
    - name: Display scan results
      ansible.builtin.debug:
        msg: |
          OpenSCAP Scan Results:
          - Host: {{ inventory_hostname }}
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Profile: {{ profile_name }}
          - Profile Path: {{ profile_path }}
          - Return Code: {{ oscap_result.rc | default('Unknown') }}
          - Status: {{ 'Success' if (oscap_result.rc | default(99)) in [0, 2] else 'Failed' }}
          
          Output:
          {{ oscap_result.stdout | default('No output') }}
          
          {% if oscap_result.stderr is defined and oscap_result.stderr != '' %}
          Errors:
          {{ oscap_result.stderr }}
          {% endif %}
      tags: scan

    # Task 11: Fix timezone (only if ARF file exists)
    - name: Check if ARF file exists
      ansible.builtin.stat:
        path: "{{ scap_reports_dir }}/{{ scan_timestamp }}-arf.xml"
      register: arf_check
      tags: post_scan

    - name: Fix timezone in ARF file
      ansible.builtin.replace:
        path: "{{ scap_reports_dir }}/{{ scan_timestamp }}-arf.xml"
        regexp: '([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2})(?![+\-Z0-9:])'
        replace: '\1{{ timezone_offset }}'
      when: 
        - arf_check.stat.exists | default(false)
        - arf_check.stat.size | default(0) > 0
      ignore_errors: yes
      tags: post_scan

    # Task 12: Upload report (only if file exists)
    - name: Upload ARF report
      ansible.builtin.shell: |
        ARF_FILE="{{ scap_reports_dir }}/{{ scan_timestamp }}-arf.xml"
        
        if [ ! -f "$ARF_FILE" ]; then
          echo "No ARF file to upload"
          exit 1
        fi
        
        SIZE=$(stat -c%s "$ARF_FILE" 2>/dev/null || echo "0")
        if [ "$SIZE" -eq 0 ]; then
          echo "ARF file is empty"
          exit 1
        fi
        
        echo "Uploading $ARF_FILE (size: $SIZE bytes)"
        
        curl -f -X POST \
          -F "target={{ inventory_hostname }}" \
          -F "report=@$ARF_FILE" \
          "{{ report_server }}/upload"
      register: upload_result
      when: 
        - arf_check.stat.exists | default(false)
        - arf_check.stat.size | default(0) > 0
      ignore_errors: yes
      tags: post_scan

    # Task 13: Trigger report rendering
    - name: Trigger report rendering
      ansible.builtin.uri:
        url: "{{ report_server }}/render"
        method: GET
        timeout: 30
      when: upload_result is defined and upload_result.rc == 0
      ignore_errors: yes
      tags: post_scan

    # Task 14: Final summary
    - name: Display final summary
      ansible.builtin.debug:
        msg: |
          === OpenSCAP Compliance Scan Summary ===
          Host: {{ inventory_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Profile Used: {{ profile_path }}
          Scan Status: {{ 'Success' if (oscap_result.rc | default(99)) in [0, 2] else 'Failed' }}
          ARF File: {{ 'Created' if (arf_check.stat.exists | default(false)) else 'Not Created' }}
          Upload Status: {{ 'Success' if (upload_result is defined and upload_result.rc == 0) else 'Failed/Skipped' }}
          Reports Location: {{ scap_reports_dir }}/{{ scan_timestamp }}-*
      tags: always
