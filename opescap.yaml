---
- name: OpenSCAP Security Compliance Scan (Improved)
  hosts: all
  become: yes
  vars:
    scap_reports_dir: "/opt/reports"
    scap_profiles_dir: "/opt/scap_profiles"
    scap_guide_version: "0.1.76"
    timezone_offset: "+07:00"
    report_server: "http://10.20.11.117:2112"

  tasks:
    # Task 1: Update package cache and install basic tools
    - name: Update package cache
      ansible.builtin.package:
        update_cache: yes
      ignore_errors: yes
      tags: setup

    - name: Install basic tools
      ansible.builtin.package:
        name:
          - curl
          - wget
          - unzip
        state: present
      ignore_errors: yes
      tags: setup

    # Task 2: Install OpenSCAP packages based on OS and version
    - name: Install OpenSCAP packages for Ubuntu < 24.04
      ansible.builtin.package:
        name:
          - libopenscap8
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower == "ubuntu"
        - ansible_distribution_major_version | int < 24
      register: ubuntu_old_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for Ubuntu >= 24.04
      ansible.builtin.package:
        name:
          - openscap-scanner
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower == "ubuntu"
        - ansible_distribution_major_version | int >= 24
      register: ubuntu_new_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for Debian (non-Ubuntu)
      ansible.builtin.package:
        name:
          - openscap-utils
          - libopenscap8
        state: present
      when: 
        - ansible_os_family == "Debian"
        - ansible_distribution | lower != "ubuntu"
      register: debian_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for AlmaLinux
      ansible.builtin.package:
        name:
          - openscap-scanner
          - scap-security-guide
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution | lower in ['almalinux', 'alma']
      register: alma_install
      ignore_errors: yes
      tags: setup

    - name: Install OpenSCAP packages for other RHEL-based systems
      ansible.builtin.package:
        name:
          - openscap-scanner
          - scap-security-guide
          - openscap-utils
        state: present
      when: 
        - ansible_os_family == "RedHat"
        - ansible_distribution | lower not in ['almalinux', 'alma']
      register: rhel_install
      ignore_errors: yes
      tags: setup

    - name: Display OpenSCAP installation results
      ansible.builtin.debug:
        msg: |
          OpenSCAP Installation Results:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - OS Family: {{ ansible_os_family }}
          - Package Installation Status:
            {% if ansible_os_family == "Debian" and ansible_distribution | lower == "ubuntu" %}
              {% if ansible_distribution_major_version | int < 24 %}
                Ubuntu < 24.04: {{ 'Success' if (ubuntu_old_install is defined and ubuntu_old_install is succeeded) else 'Failed' }}
                Packages: openscap-utils, libopenscap8
              {% else %}
                Ubuntu >= 24.04: {{ 'Success' if (ubuntu_new_install is defined and ubuntu_new_install is succeeded) else 'Failed' }}
                Packages: openscap-scanner, openscap-utils
              {% endif %}
            {% elif ansible_os_family == "Debian" %}
              Debian: {{ 'Success' if (debian_install is defined and debian_install is succeeded) else 'Failed' }}
              Packages: openscap-utils, libopenscap8
            {% elif ansible_distribution | lower in ['almalinux', 'alma'] %}
              AlmaLinux: {{ 'Success' if (alma_install is defined and alma_install is succeeded) else 'Failed' }}
              Packages: openscap-scanner, scap-security-guide, openscap-utils
            {% elif ansible_os_family == "RedHat" %}
              RHEL-based: {{ 'Success' if (rhel_install is defined and rhel_install is succeeded) else 'Failed' }}
              Packages: openscap-scanner, scap-security-guide, openscap-utils
            {% endif %}
      tags: setup

    # Task 3: Gather OS information
    - name: Gather OS facts
      ansible.builtin.setup:
        gather_subset:
          - distribution
      tags: always

    # Task 4: Create required directories
    - name: Create directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ scap_reports_dir }}"
        - "{{ scap_profiles_dir }}"
      tags: setup

    # Task 5: Check for local SCAP profiles first
    - name: Check for local SCAP profiles
      ansible.builtin.find:
        paths:
          - "/usr/share/xml/scap/ssg/content"
          - "/usr/share/scap-security-guide"
          - "/usr/share/openscap"
        patterns: "*ds.xml"
        file_type: file
      register: local_scap_profiles
      ignore_errors: yes
      tags: setup

    - name: Display local SCAP profiles found
      ansible.builtin.debug:
        msg: |
          Local SCAP profiles search:
          - Total files found: {{ local_scap_profiles.files | length }}
          - Files: {{ local_scap_profiles.files | map(attribute='path') | list }}
      tags: setup

    # Task 6: Check if OS-specific profile exists locally
    - name: Check for OS-specific local profile
      ansible.builtin.set_fact:
        os_specific_local_profile: >-
          {%- set profile_patterns = [] -%}
          {%- if ansible_distribution | lower == 'ubuntu' -%}
            {%- set _ = profile_patterns.append('*ubuntu' + ansible_distribution_major_version + '*ds.xml') -%}
            {%- set _ = profile_patterns.append('*ubuntu*ds.xml') -%}
          {%- elif ansible_distribution | lower == 'almalinux' -%}
            {%- set _ = profile_patterns.append('*almalinux' + ansible_distribution_major_version + '*ds.xml') -%}
            {%- set _ = profile_patterns.append('*almalinux*ds.xml') -%}
          {%- elif ansible_distribution | lower in ['rocky', 'rockylinux'] -%}
            {%- set _ = profile_patterns.append('*rocky' + ansible_distribution_major_version + '*ds.xml') -%}
            {%- set _ = profile_patterns.append('*rocky*ds.xml') -%}
          {%- elif ansible_distribution | lower in ['centos', 'rhel', 'redhat'] -%}
            {%- set _ = profile_patterns.append('*rhel' + ansible_distribution_major_version + '*ds.xml') -%}
            {%- set _ = profile_patterns.append('*rhel*ds.xml') -%}
          {%- else -%}
            {%- set _ = profile_patterns.append('*rhel*ds.xml') -%}
          {%- endif -%}
          {%- for file in local_scap_profiles.files -%}
            {%- for pattern in profile_patterns -%}
              {%- if file.path | basename | fnmatch(pattern) -%}
                {{ file.path }}
              {%- endif -%}
            {%- endfor -%}
          {%- endfor -%}
      when: local_scap_profiles.files is defined and local_scap_profiles.files | length > 0
      tags: setup

    # Task 7: Copy local profiles if found, otherwise download
    - name: Copy OS-specific profiles from local system
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ scap_profiles_dir }}/{{ item | basename }}"
        remote_src: yes
        mode: '0644'
      loop: "{{ local_scap_profiles.files | map(attribute='path') | list }}"
      when: 
        - local_scap_profiles.files is defined
        - local_scap_profiles.files | length > 0
        - os_specific_local_profile is defined
        - os_specific_local_profile | length > 0
      ignore_errors: yes
      tags: setup

    # Task 8: Copy OS-specific SCAP profiles from Ansible controller
    - name: Find OS-specific profiles on Ansible controller
      ansible.builtin.find:
        paths: "/opt/scap_profiles"
        patterns: 
          {% if ansible_distribution | lower == 'ubuntu' %}
          - "*ubuntu{{ ansible_distribution_major_version }}*ds.xml"
          - "*ubuntu*ds.xml"
          {% elif ansible_distribution | lower == 'almalinux' %}
          - "*almalinux{{ ansible_distribution_major_version }}*ds.xml"
          - "*almalinux*ds.xml"
          - "*rhel{{ ansible_distribution_major_version }}*ds.xml"
          - "*rhel*ds.xml"
          {% elif ansible_distribution | lower in ['rocky', 'rockylinux'] %}
          - "*rocky{{ ansible_distribution_major_version }}*ds.xml"
          - "*rocky*ds.xml"
          - "*rhel{{ ansible_distribution_major_version }}*ds.xml"
          - "*rhel*ds.xml"
          {% elif ansible_distribution | lower in ['centos', 'rhel', 'redhat'] %}
          - "*rhel{{ ansible_distribution_major_version }}*ds.xml"
          - "*rhel*ds.xml"
          {% else %}
          - "*rhel*ds.xml"
          {% endif %}
        file_type: file
      delegate_to: localhost
      when: 
        - os_specific_local_profile is not defined or os_specific_local_profile | length == 0
      register: controller_profiles
      ignore_errors: yes
      tags: setup

    - name: Copy matching OS-specific profiles from controller
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ scap_profiles_dir }}/{{ item.path | basename }}"
        mode: '0644'
      loop: "{{ controller_profiles.files }}"
      when: 
        - os_specific_local_profile is not defined or os_specific_local_profile | length == 0
        - controller_profiles is defined
        - controller_profiles.files is defined
        - controller_profiles.files | length > 0
      ignore_errors: yes
      tags: setup

    - name: Display copied profiles from controller
      ansible.builtin.debug:
        msg: |
          Profiles copied from Ansible controller:
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Profiles found on controller: {{ controller_profiles.files | length if (controller_profiles.files is defined) else 0 }}
          - Files copied: {{ controller_profiles.files | map(attribute='path') | map('basename') | list if (controller_profiles.files is defined) else [] }}
      when: 
        - controller_profiles is defined
      tags: setup

    # Task 9: Find the best available profile
    - name: Find best available SCAP profile
      ansible.builtin.shell: |
        echo "=== FINDING BEST AVAILABLE PROFILE ==="
        echo "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
        echo "Looking in: {{ scap_profiles_dir }}"
        
        # List all available profiles
        echo "Available profiles:"
        ls -la {{ scap_profiles_dir }}/*.xml 2>/dev/null || echo "No XML files found"
        
        SELECTED_PROFILE=""
        
        {% if ansible_distribution | lower == 'ubuntu' %}
        # For Ubuntu, prefer version-specific, then generic Ubuntu
        echo "Ubuntu - looking for version-specific profiles first..."
        
        VERSION="{{ ansible_distribution_major_version }}"
        for pattern in "ubuntu${VERSION}" "ubuntu20" "ubuntu22" "ubuntu24" "ubuntu"; do
          PROFILE=$(find {{ scap_profiles_dir }} -name "*${pattern}*ds.xml" -type f 2>/dev/null | head -1)
          if [ -n "$PROFILE" ]; then
            SELECTED_PROFILE="$PROFILE"
            echo "✓ Selected Ubuntu profile: $SELECTED_PROFILE"
            break
          fi
        done
        {% elif ansible_distribution | lower == 'almalinux' %}
        # For AlmaLinux, prefer AlmaLinux-specific, then RHEL
        echo "AlmaLinux - looking for AlmaLinux-specific profiles first..."
        
        VERSION="{{ ansible_distribution_major_version | default('9') }}"
        for pattern in "almalinux${VERSION}" "almalinux" "rhel${VERSION}" "rhel9" "rhel8" "rhel"; do
          PROFILE=$(find {{ scap_profiles_dir }} -name "*${pattern}*ds.xml" -type f 2>/dev/null | head -1)
          if [ -n "$PROFILE" ]; then
            SELECTED_PROFILE="$PROFILE"
            echo "✓ Selected AlmaLinux profile: $SELECTED_PROFILE"
            break
          fi
        done
        {% elif ansible_distribution | lower in ['rocky', 'rockylinux'] %}
        # For Rocky Linux, prefer Rocky-specific, then RHEL
        echo "Rocky Linux - looking for Rocky-specific profiles first..."
        
        VERSION="{{ ansible_distribution_major_version | default('9') }}"
        for pattern in "rocky${VERSION}" "rocky" "rhel${VERSION}" "rhel9" "rhel8" "rhel"; do
          PROFILE=$(find {{ scap_profiles_dir }} -name "*${pattern}*ds.xml" -type f 2>/dev/null | head -1)
          if [ -n "$PROFILE" ]; then
            SELECTED_PROFILE="$PROFILE"
            echo "✓ Selected Rocky profile: $SELECTED_PROFILE"
            break
          fi
        done
        {% else %}
        # For other RHEL-based systems, prefer version-specific RHEL
        echo "RHEL-based - looking for RHEL profiles..."
        
        VERSION="{{ ansible_distribution_major_version | default('9') }}"
        for pattern in "rhel${VERSION}" "rhel9" "rhel8" "rhel"; do
          PROFILE=$(find {{ scap_profiles_dir }} -name "*${pattern}*ds.xml" -type f 2>/dev/null | head -1)
          if [ -n "$PROFILE" ]; then
            SELECTED_PROFILE="$PROFILE"
            echo "✓ Selected RHEL profile: $SELECTED_PROFILE"
            break
          fi
        done
        {% endif %}
        
        # Fallback to any available profile
        if [ -z "$SELECTED_PROFILE" ]; then
          echo "No OS-specific profile found, using any available profile..."
          SELECTED_PROFILE=$(find {{ scap_profiles_dir }} -name "*ds.xml" -type f 2>/dev/null | head -1)
          if [ -n "$SELECTED_PROFILE" ]; then
            echo "✓ Selected fallback profile: $SELECTED_PROFILE"
          fi
        fi
        
        if [ -z "$SELECTED_PROFILE" ]; then
          echo "ERROR: No SCAP profiles found in {{ scap_profiles_dir }}"
          exit 1
        fi
        
        echo "$SELECTED_PROFILE"
      register: profile_selection
      ignore_errors: yes
      tags: scan

    - name: Show profile selection result
      ansible.builtin.debug:
        msg: "{{ profile_selection.stdout_lines }}"
      tags: scan

    # Task 10: Generate timestamp
    - name: Generate scan timestamp
      ansible.builtin.set_fact:
        scan_timestamp: "{{ ansible_date_time.iso8601_basic_short }}"
      tags: scan

    # Task 11: Execute OpenSCAP scan with proper error handling
    - name: Execute OpenSCAP scan with selected profile
      ansible.builtin.shell: |
        PROFILE_FILE="{{ profile_selection.stdout_lines[-1] }}"
        
        echo "=== EXECUTING OSCAP SCAN ==="
        echo "Selected profile: $PROFILE_FILE"
        
        # Verify file exists
        if [ ! -f "$PROFILE_FILE" ]; then
          echo "ERROR: Profile file not found: $PROFILE_FILE"
          exit 1
        fi
        
        # Get available profile IDs and select appropriate one
        echo "Getting available profile IDs..."
        oscap info "$PROFILE_FILE" > /tmp/oscap_info.txt 2>&1
        
        # Try to find CIS Level 2 Server profile first, then Level 1, then any profile
        PROFILE_ID=""
        for pattern in "cis.*level.*2.*server" "cis.*level.*1.*server" "cis.*server" "cis" ".*"; do
          PROFILE_ID=$(grep -i "Id:" /tmp/oscap_info.txt | grep -i "$pattern" | head -1 | awk '{print $2}')
          if [ -n "$PROFILE_ID" ]; then
            echo "Found profile ID matching '$pattern': $PROFILE_ID"
            break
          fi
        done
        
        if [ -z "$PROFILE_ID" ]; then
          # Get first available profile ID
          PROFILE_ID=$(grep "Id:" /tmp/oscap_info.txt | head -1 | awk '{print $2}')
        fi
        
        if [ -z "$PROFILE_ID" ]; then
          echo "ERROR: No profiles found in datastream"
          cat /tmp/oscap_info.txt
          exit 1
        fi
        
        echo "Using profile ID: $PROFILE_ID"
        
        # Generate timestamp
        TIMESTAMP="{{ scan_timestamp }}"
        echo "Timestamp: $TIMESTAMP"
        
        # Prepare output files
        ARF_FILE="{{ scap_reports_dir }}/${TIMESTAMP}-arf.xml"
        HTML_FILE="{{ scap_reports_dir }}/${TIMESTAMP}-report.html"
        
        # Execute scan with proper output redirection to avoid YAML parsing issues
        echo "Starting scan..."
        oscap xccdf eval \
          --profile "$PROFILE_ID" \
          --results-arf "$ARF_FILE" \
          --report "$HTML_FILE" \
          "$PROFILE_FILE" > /tmp/oscap_output.txt 2>&1
        
        SCAN_RC=$?
        echo "Scan completed with return code: $SCAN_RC"
        
        # Show scan output (filtered to avoid YAML issues)
        echo "=== SCAN OUTPUT ==="
        grep -v "^W: oscap:" /tmp/oscap_output.txt | head -20
        
        # Verify ARF file creation
        if [ -f "$ARF_FILE" ]; then
          echo "✓ ARF file created: $ARF_FILE"
          ls -la "$ARF_FILE"
        else
          echo "✗ ARF file not created"
        fi
        
        # Verify HTML report creation
        if [ -f "$HTML_FILE" ]; then
          echo "✓ HTML report created: $HTML_FILE"
          ls -la "$HTML_FILE"
        else
          echo "✗ HTML report not created"
        fi
        
        exit $SCAN_RC
      register: oscap_scan_result
      when: 
        - profile_selection is defined
        - profile_selection.rc == 0
        - profile_selection.stdout_lines is defined
        - profile_selection.stdout_lines | length > 0
      ignore_errors: yes
      tags: scan

    # Task 12: Display scan results
    - name: Display scan results
      ansible.builtin.debug:
        msg: |
          OpenSCAP Scan Results:
          - Host: {{ inventory_hostname }}
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Profile Used: {{ profile_selection.stdout_lines[-1] if (profile_selection.stdout_lines is defined and profile_selection.stdout_lines | length > 0) else 'None' }}
          - Scan Executed: {{ 'Yes' if (oscap_scan_result is defined) else 'No - Skipped' }}
          - Scan Status: {{ 'Success' if (oscap_scan_result is defined and oscap_scan_result.rc is defined and oscap_scan_result.rc in [0, 2]) else 'Failed/Skipped' }}
          - Return Code: {{ oscap_scan_result.rc if (oscap_scan_result is defined and oscap_scan_result.rc is defined) else 'N/A' }}
      tags: scan

    # Task 13: Find ARF files created
    - name: Find ARF files created
      ansible.builtin.find:
        paths: "{{ scap_reports_dir }}"
        patterns: "*-arf.xml"
        age: "-10m"
        file_type: file
      register: find_arf_files
      when: oscap_scan_result is defined and oscap_scan_result.rc is defined and oscap_scan_result.rc in [0, 2]
      ignore_errors: yes
      tags: post_scan

    - name: Upload ARF report if found
      ansible.builtin.uri:
        url: "{{ report_server }}/upload"
        method: POST
        body_format: form-multipart
        body:
          target: "{{ inventory_hostname }}"
          report: "{{ lookup('file', item.path) }}"
        timeout: 60
      loop: "{{ find_arf_files.files }}"
      when: 
        - find_arf_files is defined
        - find_arf_files.files is defined
        - find_arf_files.files | length > 0
      register: upload_results
      ignore_errors: yes
      tags: post_scan

    # Task 14: Trigger report rendering (fixed condition)
    - name: Trigger report rendering
      ansible.builtin.uri:
        url: "{{ report_server }}/render"
        method: GET
        timeout: 30
      when: 
        - upload_results is defined
        - upload_results.results is defined
        - upload_results.results | selectattr('status', 'defined') | selectattr('status', 'equalto', 200) | list | length > 0
      ignore_errors: yes
      tags: post_scan

    # Task 15: Final summary
    - name: Display final summary
      ansible.builtin.debug:
        msg: |
          === OpenSCAP Compliance Scan Summary ===
          Host: {{ inventory_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Local Profiles Found: {{ local_scap_profiles.files | length if (local_scap_profiles.files is defined) else 0 }}
          Profile Used: {{ profile_selection.stdout_lines[-1] if (profile_selection.stdout_lines is defined and profile_selection.stdout_lines | length > 0) else 'None' }}
          Scan Status: {{ 'Success' if (oscap_scan_result is defined and oscap_scan_result.rc is defined and oscap_scan_result.rc in [0, 2]) else 'Failed/Skipped' }}
          ARF Files Created: {{ find_arf_files.files | length if (find_arf_files.files is defined) else 0 }}
          Upload Status: {{ 'Success' if (upload_results is defined and upload_results.results is defined) else 'Skipped' }}
          Reports Location: {{ scap_reports_dir }}/{{ scan_timestamp }}-*
      tags: always
