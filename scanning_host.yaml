---
- name: OpenSCAP Security Compliance Scan
  hosts: all
  become: yes
  vars:
    scap_reports_dir: "/opt/reports"
    scap_profiles_dir: "/opt/scap_profiles"
    scap_guide_version: "0.1.76"
    timezone_offset: "+07:00"
    report_server: "http://10.20.11.117:2112" 

  tasks:
    # Task 1: OS detection and profile selection
    - name: Gather OS facts
      ansible.builtin.setup:
        gather_subset:
          - distribution
          - os_family
        filter: "ansible_distribution*"
      register: os_facts
      ignore_errors: yes
      tags: always

    # Task 2: Set profile name with STRICT whitespace control
    - name: Set Ubuntu profile name (whitespace-safe)
      ansible.builtin.set_fact:
        target_profile: >-
          {%- if os_facts.ansible_facts.ansible_distribution | lower == 'ubuntu' -%}
            {%- if os_facts.ansible_facts.ansible_distribution_major_version == '20' -%}
              ssg-ubuntu2004-ds.xml
            {%- elif os_facts.ansible_facts.ansible_distribution_major_version == '22' -%}
              ssg-ubuntu2204-ds.xml
            {%- elif os_facts.ansible_facts.ansible_distribution_major_version == '24' -%}
              ssg-ubuntu2004-ds.xml
            {%- else -%}
              ssg-ubuntu2004-ds.xml
            {%- endif -%}
          {%- else -%}
            ssg-{{ (os_facts.ansible_facts.ansible_distribution | default('unknown')) | lower }}{{ os_facts.ansible_facts.ansible_distribution_major_version | default('0') }}-ds.xml
          {%- endif -%}
      tags: scan

    # Task 3: Create CLEAN profile path
    - name: Create sanitized profile path
      ansible.builtin.set_fact:
        clean_profile_path: "{{ (scap_profiles_dir + '/' + target_profile) | regex_replace('\\s+', '') }}"
      tags: scan

    # Task 4: Debug the final path (for verification)
    - name: Show final profile path
      ansible.builtin.debug:
        msg: "Final profile path: '{{ clean_profile_path }}'"
      tags: scan

    - name: Copy the profile to the remote host
      copy:
        src: "{{ clean_profile_path }}"
        dest: "{{ clean_profile_path }}"
        mode: '0755'

    - name: Check profile exists on target
      ansible.builtin.stat:
        path: "{{ scap_profiles_dir }}/{{ target_profile }}"
      register: profile_check
      tags: scan
      
    - name: Ensure reports directory exists
      ansible.builtin.file:
        path: "{{ scap_reports_dir }}"
        state: directory
        mode: '0755'
      tags: scan

    # Task 3: Execute OpenSCAP scan
    - name: Run security scan
      ansible.builtin.shell: |
        oscap xccdf eval \
        --profile xccdf_org.ssgproject.content_profile_cis_level2_server \
        --results-arf "{{ scap_reports_dir }}/{{ ansible_date_time.iso8601_basic_short }}-arf.xml" \
        "{{ scap_profiles_dir }}/{{ target_profile }}"
      args:
        executable: /bin/bash
      register: oscap_scan
      ignore_errors: yes
      changed_when: 
        - oscap_scan.rc in [0, 2]
        - "'Rule: Some rules failed.' in oscap_scan.stdout"
      failed_when:
        - oscap_scan.rc not in [0, 2]
        or
        - "'Rule: Some rules failed.' not in oscap_scan.stdout"
      tags: scan

    # Task 4: Handle scan results
    - name: Process scan results
      block:
        - name: Check scan status
          ansible.builtin.debug:
            msg: "Scan completed with findings (normal for compliance scans)"
          when: oscap_scan.rc == 2

        - name: Check successful scan
          ansible.builtin.debug:
            msg: "Scan completed with no findings"
          when: oscap_scan.rc == 0
      rescue:
        - name: Handle scan failure
          ansible.builtin.fail:
            msg: "OpenSCAP scan failed with error (RC={{ oscap_scan.rc }}): {{ oscap_scan.stderr }}"
      tags: scan
    
    # Task 4: Fix timestamp in ARF report
    - name: Adjust timezone in ARF report
      ansible.builtin.shell: >
        sed -i -E 's/([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2})([^:+Z0-9]|")/\1{{ timezone_offset }}\2/g'
        "{{ scap_reports_dir }}/{{ ansible_date_time.iso8601_basic_short }}-arf.xml"
      args:
        executable: /bin/bash
      when: oscap_scan is changed or oscap_scan is success
      tags: post_scan

    # Task 5: Upload report to server
    - name: Upload compliance report
      ansible.builtin.uri:
        url: "{{ report_server }}/upload"
        method: POST
        body_format: form-multipart
        headers:
          Content-Type: "multipart/form-data"
        body:
          target: "{{ inventory_hostname }}"
          report: "@{{ scap_reports_dir }}/{{ ansible_date_time.iso8601_basic_short }}-arf.xml"
      register: upload_result
      when: oscap_scan is changed or oscap_scan is success
      tags: post_scan

    # Task 6: Trigger report rendering
    - name: Trigger report generation
      ansible.builtin.uri:
        url: "{{ report_server }}/render"
        method: GET
      register: render_result
      when: upload_result is defined and upload_result.status == 200
      tags: post_scan

  handlers:
    - name: Clean up on failure
      ansible.builtin.file:
        path: "{{ scap_reports_dir }}"
        state: absent
      when: "'oscap_scan' in vars and oscap_scan is failed"
      tags: cleanup
