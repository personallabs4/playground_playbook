---
- name: OpenSCAP Security Compliance Scan
  hosts: all
  become: yes
  vars:
    scap_reports_dir: "/opt/reports"
    scap_profiles_src: "/opt/scap_profiles"  # Source directory on control node
    scap_guide_version: "0.1.76"
    timezone_offset: "+07:00"
    report_server: "http://10.20.11.117:2112"   

  tasks:
    # Task 1: OS detection and profile selection
    - name: Gather OS facts
      ansible.builtin.setup:
        gather_subset:
          - distribution
          - os_family
        filter: "ansible_distribution*"
      register: os_facts
      ignore_errors: yes
      tags: always

    - name: Set Ubuntu-specific profile names
      ansible.builtin.set_fact:
        target_profile: >-
          {% if os_facts.ansible_facts.ansible_distribution | lower == 'ubuntu' %}
            {% if os_facts.ansible_facts.ansible_distribution_major_version == '20' %}
              ssg-ubuntu2004-ds.xml
            {% elif os_facts.ansible_facts.ansible_distribution_major_version == '22' %}
              ssg-ubuntu2204-ds.xml
            {% elif os_facts.ansible_facts.ansible_distribution_major_version == '24' %}
              ssg-ubuntu2404-ds.xml  # Special case for Ubuntu 24
            {% else %}
              ssg-ubuntu2004-ds.xml  # Default for other Ubuntu versions
            {% endif %}
          {% else %}
            ssg-{{ (os_facts.ansible_facts.ansible_distribution | default('unknown')) | lower }}{{ os_facts.ansible_facts.ansible_distribution_major_version | default('0') }}-ds.xml
          {% endif %}
      tags: scan

    - name: Clean whitespace from profile path
      ansible.builtin.set_fact:
        clean_profile_path: "{{ target_profile | trim }}"
      tags: scan

    - name: Debug profile selection
      ansible.builtin.debug:
        msg: "Selected profile: {{ clean_profile_path }}"
      tags: scan

    - name: Copy the profile to the remote host
      copy:
        src: "/opt/scap_profiles/{{ clean_profile_path }}"
        dest: "/opt/scap_profiles/{{ clean_profile_path }}"
        mode: '0755'

    # Task 2: Profile validation and scanning
    - name: Check if profile exists
      ansible.builtin.stat:
        path: "/opt/scap_profiles/{{ clean_profile_path }}"
      register: profile_check
      tags: scan

    - name: Validate profile exists
      ansible.builtin.assert:
        that: profile_check.stat.exists
        fail_msg: "SCAP profile {{ clean_profile_path }} not found in /opt/scap_profiles"
      tags: scan

    - name: Ensure reports directory exists
      ansible.builtin.file:
        path: "{{ scap_reports_dir }}"
        state: directory
        mode: '0755'
      tags: scan

    # Task 3: Execute OpenSCAP scan
    - name: Run security scan
      ansible.builtin.command: >
        oscap xccdf eval
        --profile xccdf_org.ssgproject.content_profile_cis_level2_server
        --results-arf "{{ scap_reports_dir }}/{{ ansible_date_time.iso8601_basic_short }}-arf.xml"
        "/opt/scap_profiles/{{ target_profile }}"
      register: oscap_scan
      changed_when: "'Rule: Some rules failed.' in oscap_scan.stdout"
      failed_when:
        - oscap_scan.rc != 0
        - "'Rule: Some rules failed.' not in oscap_scan.stdout"
      tags: scan
    
    # Task 4: Fix timestamp in ARF report
    - name: Adjust timezone in ARF report
      ansible.builtin.shell: >
        sed -i -E 's/([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2})([^:+Z0-9]|")/\1{{ timezone_offset }}\2/g'
        "{{ scap_reports_dir }}/{{ ansible_date_time.iso8601_basic_short }}-arf.xml"
      args:
        executable: /bin/bash
      when: oscap_scan is changed or oscap_scan is success
      tags: post_scan

    # Task 5: Upload report to server
    - name: Upload compliance report
      ansible.builtin.uri:
        url: "{{ report_server }}/upload"
        method: POST
        body_format: form-multipart
        headers:
          Content-Type: "multipart/form-data"
        body:
          target: "{{ inventory_hostname }}"
          report: "@{{ scap_reports_dir }}/{{ ansible_date_time.iso8601_basic_short }}-arf.xml"
      register: upload_result
      when: oscap_scan is changed or oscap_scan is success
      tags: post_scan

    # Task 6: Trigger report rendering
    - name: Trigger report generation
      ansible.builtin.uri:
        url: "{{ report_server }}/render"
        method: GET
      register: render_result
      when: upload_result is defined and upload_result.status == 200
      tags: post_scan

  handlers:
    - name: Clean up on failure
      ansible.builtin.file:
        path: "{{ scap_reports_dir }}"
        state: absent
      when: "'oscap_scan' in vars and oscap_scan is failed"
      tags: cleanup
